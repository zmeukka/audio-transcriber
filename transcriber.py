#!/usr/bin/env python3
"""
Audio Transcriber - Main application file
Automatically transcribes audio files using WhisperX
"""

import argparse
import sys
import os
from pathlib import Path

# Add modules directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

from config_loader import ConfigLoader
from logger import Logger
from file_manager import FileManager
from audio_processor import AudioProcessor


def main():
    """Main application entry point"""
    # Set UTF-8 encoding for stdout to handle Russian text
    if sys.platform == "win32":
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Audio Transcriber using WhisperX')
    parser.add_argument('--file', help='Process specific file instead of all files')
    parser.add_argument('--config', default='config.yaml', help='Path to configuration file')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose output')
    parser.add_argument('--test', action='store_true', help='Enable test mode (process sample.oga)')
    parser.add_argument('--fast', action='store_true', help='Use fast mode with pre-warmed models')

    args = parser.parse_args()

    # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —Å pre-warmed –º–æ–¥–µ–ª—è–º–∏
    if args.fast:
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ...")
        from fast_transcriber import FastTranscriber

        try:
            transcriber = FastTranscriber(args.config)

            if args.test:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                test_file = Path("input/sample.oga")
                if test_file.exists():
                    transcriber.transcribe_to_text(str(test_file))
                else:
                    print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª input/sample.oga –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return 1

            elif args.file:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                transcriber.transcribe_to_text(args.file)

            else:
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ
                print("‚ö†Ô∏è –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python transcriber.py --fast --file path/to/audio.oga")
                return 1

            print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return 1

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    try:
        # Load configuration
        config = ConfigLoader.load(args.config)

        # Initialize logger
        debug_flag = config.get('whisperx', {}).get('debug', False)
        logger = Logger(config.get('output_directory', 'output'), verbose=args.verbose, debug=debug_flag)
        logger.info("Starting Audio Transcriber")

        # Initialize components
        file_manager = FileManager(config, logger, test_mode=args.test)
        audio_processor = AudioProcessor(config, logger)

        # Process files
        if args.file:
            # Process single file
            logger.info(f"Processing single file: {args.file}")
            file_manager.process_file(args.file, audio_processor)
        else:
            # Process all files in input directory
            if args.test:
                logger.info("Test mode: Processing sample.oga file")
            else:
                logger.info("Processing all files in input directory (excluding sample.oga)")
            file_manager.process_all_files(audio_processor)

        logger.info("Audio Transcriber completed successfully")

    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
