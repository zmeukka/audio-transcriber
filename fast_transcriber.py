"""
–ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pre-warmed –º–æ–¥–µ–ª–µ–π
–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –∑–∞ —Å—á–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º modules –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

from prewarmer import WhisperXPrewarmer


class FastTranscriber:
    """–ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä —Å pre-warmed –º–æ–¥–µ–ª—è–º–∏"""

    def __init__(self, config_path="config.yaml"):
        self.prewarmer = WhisperXPrewarmer(config_path)
        self.ready = False

    def ensure_ready(self):
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"""
        if self.ready:
            return

        print("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞...")
        start_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        try:
            self.prewarmer.warm_up_model()
            self.ready = True

            elapsed = time.time() - start_time
            print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def transcribe_file(self, audio_path):
        """–ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ–∞–π–ª–∞"""
        self.ensure_ready()

        audio_file = Path(audio_path)
        if not audio_file.exists():
            raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")

        print(f"üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞: {audio_file.name}")
        start_time = time.time()

        try:
            import whisperx

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            model, align_model, metadata = self.prewarmer.get_models()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio = whisperx.load_audio(str(audio_file))

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            config = self.prewarmer.config['whisperx']
            result = model.transcribe(
                audio,
                batch_size=16,
                language=config['language']
                # –£–±–∏—Ä–∞–µ–º temperature - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ FasterWhisperPipeline
            )

            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if align_model and metadata:
                try:
                    result = whisperx.align(
                        result["segments"],
                        align_model,
                        metadata,
                        audio,
                        config['device']
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è Alignment –Ω–µ —É–¥–∞–ª—Å—è: {e}")

            elapsed = time.time() - start_time
            print(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            raise

    def transcribe_to_text(self, audio_path, output_path=None):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        result = self.transcribe_file(audio_path)

        if not output_path:
            audio_file = Path(audio_path)
            output_path = Path("output") / f"{audio_file.stem}.txt"

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        self._create_text_output(Path(audio_path), result, output_path)

        return output_path

    def _create_text_output(self, audio_file, results, output_file):
        """–°–æ–∑–¥–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        from datetime import datetime

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        segments = results.get('segments', [])
        duration = 0
        if segments:
            last_segment = segments[-1]
            duration = last_segment.get('end', 0)

        duration_str = self._format_duration(duration)
        process_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = f"""=== –†–ê–°–®–ò–§–†–û–í–ö–ê –ê–£–î–ò–û–ó–ê–ü–ò–°–ò ===
–§–∞–π–ª: {audio_file.name}
–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_time}
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}
–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–Ω—è–ª–∞: –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

=== –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø ===
"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        for segment in segments:
            start_time = self._format_timestamp(segment.get('start', 0))
            text = segment.get('text', '').strip()

            if text:  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                content += f"[{start_time}] {text}\n"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        output_file.parent.mkdir(parents=True, exist_ok=True)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)

        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

    def _format_timestamp(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        try:
            from datetime import timedelta
            td = timedelta(seconds=int(seconds))
            hours, remainder = divmod(td.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        except:
            return "00:00:00"

    def _format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        return self._format_timestamp(seconds)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞"""
    import argparse

    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä WhisperX')
    parser.add_argument('--file', required=True, help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É')
    parser.add_argument('--output', help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É')

    args = parser.parse_args()

    try:
        # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä
        transcriber = FastTranscriber()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        output_path = transcriber.transcribe_to_text(args.file, args.output)

        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
