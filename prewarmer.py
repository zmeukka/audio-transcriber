"""
WhisperX Pre-warmer –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
"""

import time
import logging
import pickle
import os
import sys
import threading
from pathlib import Path
import yaml

class WhisperXPrewarmer:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ WhisperX –º–æ–¥–µ–ª–µ–π"""

    def __init__(self, config_path="config.yaml"):
        self.config = self._load_config(config_path)
        self.model = None
        self.align_model = None
        self.metadata = None
        self.cache_path = Path("cache")
        self.cache_path.mkdir(exist_ok=True)
        self.ready = False

    def _load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return {
                'whisperx': {
                    'model_size': 'base',
                    'language': 'ru',
                    'temperature': 0.1,
                    'compute_type': 'int8',
                    'device': 'cpu'
                }
            }

    def warm_up_model(self):
        """Pre-warming –º–æ–¥–µ–ª–∏ WhisperX"""
        print("üî• –ó–∞–ø—É—Å–∫ pre-warming –º–æ–¥–µ–ª–∏ WhisperX...")
        start_time = time.time()

        try:
            import whisperx
            import torch
            import numpy as np

            whisperx_config = self.config['whisperx']

            print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å {whisperx_config['model_size']}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            self.model = whisperx.load_model(
                whisperx_config['model_size'],
                whisperx_config['device'],
                compute_type=whisperx_config['compute_type'],
                language=whisperx_config['language']
            )

            print(f"üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º align –º–æ–¥–µ–ª—å –¥–ª—è —è–∑—ã–∫–∞ {whisperx_config['language']}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º align –º–æ–¥–µ–ª—å
            try:
                self.align_model, self.metadata = whisperx.load_align_model(
                    language_code=whisperx_config['language'],
                    device=whisperx_config['device']
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å align –º–æ–¥–µ–ª—å: {e}")
                self.align_model = None
                self.metadata = None

            # –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print("üß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            self._test_processing()

            self.ready = True
            elapsed = time.time() - start_time
            print(f"‚úÖ Pre-warming –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ pre-warming: {e}")
            raise

    def _test_processing(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            import numpy as np

            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ (1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã)
            test_audio = np.zeros(16000, dtype=np.float32)  # 1 —Å–µ–∫ @ 16kHz

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ
            result = self.model.transcribe(test_audio)

            if self.align_model and self.metadata:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                import whisperx
                result = whisperx.align(
                    result["segments"],
                    self.align_model,
                    self.metadata,
                    test_audio,
                    self.config['whisperx']['device']
                )

            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")

        except Exception as e:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

    def save_warmed_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        cache_file = self.cache_path / "warmed_state.pkl"

        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        # –°–∞–º–∏ –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è pickle
        state = {
            'ready': self.ready,
            'timestamp': time.time(),
            'config': self.config
        }

        try:
            with open(cache_file, 'wb') as f:
                pickle.dump(state, f)
            print(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {cache_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

    def load_warmed_state(self, max_age_hours=24):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–π –∫—ç—à"""
        cache_file = self.cache_path / "warmed_state.pkl"

        if not cache_file.exists():
            return False

        try:
            with open(cache_file, 'rb') as f:
                state = pickle.load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
            age_hours = (time.time() - state['timestamp']) / 3600
            if age_hours > max_age_hours:
                print(f"‚ö†Ô∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª ({age_hours:.1f}—á), –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π pre-warming")
                return False

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–µ–∂–∏–π –∫—ç—à (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}")
            return False

    def get_models(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        if not self.ready:
            raise RuntimeError("–ú–æ–¥–µ–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ warm_up_model() —Å–Ω–∞—á–∞–ª–∞.")

        return self.model, self.align_model, self.metadata


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pre-warming"""
    print("üöÄ WhisperX Pre-warmer")
    print("=" * 50)

    prewarmer = WhisperXPrewarmer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if prewarmer.load_warmed_state():
        print("üí° –ö—ç—à –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤—ã–ø–æ–ª–Ω–∏–º –ø–æ–ª–Ω—ã–π pre-warming –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏...")

    # –í—ã–ø–æ–ª–Ω—è–µ–º pre-warming
    try:
        prewarmer.warm_up_model()
        prewarmer.save_warmed_state()

        print("\nüéâ Pre-warming –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å transcriber.py --fast –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Pre-warming –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ pre-warming: {e}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
